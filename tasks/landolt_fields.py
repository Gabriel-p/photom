
from astropy.table import Table


def getTable(data_rows):
    """
    """
    t = Table(
        rows=data_rows,
        names=('ID', 'x', 'y', 'V', 'BV', 'UB', 'VR', 'RI', 'VI', 'eV', 'eBV',
               'eUB', 'eVR', 'eRI', 'eVI'))
    return t


def main(field):
    """
    Dictionary of Landolt standard stars.

    http://www.eso.org/sci/observing/tools/standards/Landolt.html
    """

    #  x  y  V  B-V    U-B    V-R    R-I    V-I   e_V   e_B-V   e_U-B   e_V-R
    # e_R-I   e_V-I

    data_pg1323 = [
        ('86', 211., 158.3, 13.481, -0.14, -0.681, -0.048, -0.078, -0.127, 0.0019, 0.0022, 0.0026, 0.0018, 0.0045, 0.0045),
        ('86A', 162.5, 137.5, 13.591, 0.393, -0.019, 0.252, 0.252, 0.506, 0.0257, 0.0022, 0.0045, 0.0027, 0.0047, 0.006),
        ('86B', 158.1, 128., 13.406, 0.761, 0.265, 0.426, 0.407, 0.833, 0.0019, 0.0029, 0.0042, 0.0023, 0.0023, 0.0031),
        ('86C', 160.1, 171.2, 14.003, 0.707, 0.245, 0.395, 0.363, 0.759, 0.0031, 0.0028, 0.0077, 0.0024, 0.0041, 0.0049),
        ('86D', 89.6, 133.7, 12.080, 0.587, 0.005, 0.346, 0.335, 0.684, 0.0023, 0.0018, 0.0036, 0.0013, 0.0026, 0.0031)]
    pg1323 = getTable(data_pg1323)

    data_SA98 = [
        ('961', 478.41717069892474, 323.93424479166657, 13.09,  1.283,  1.003,  0.701,  0.662,  1.362,  0.0021, 0.0007, 0.0014, 0.0021, 0,  0.0021),
        ('966', 472.76276881720429, 311.7719464045698,  14, 0.469,  0.357,  0.283,  0.331,  0.613,  0.0035, 0.0014, 0.0021, 0.0014, 0.0191, 0.0205),
        ('556', 465.50806451612902, 180.12040070564512, 14.14,  0.338,  0.126,  0.196,  0.243,  0.437,  0.0053, 0.0053, 0.0131, 0.0057, 0.0045, 0.009),
        ('557', 465.50806451612908, 175.15839633736556, 14.78,  1.397,  1.072,  0.755,  0.741,  1.494,  0.0007, 0.0545, 0.0269, 0.0092, 0.0297, 0.0198),
        ('562', 463.05426747311844, 272.10631720430115, 12.19,  0.522,  -0.002, 0.305,  0.303,  0.607,  0.0028, 0.005,  0.0035, 0.0014, 0.0014, 0),
        ('563', 456.33299731182808, 154.74653897849475, 14.16,  0.416,  -0.19,  0.294,  0.317,  0.61,   0.0051, 0.0085, 0.0073, 0.0044, 0.0079, 0.0082),
        ('978', 454.41263440860234, 389.10069304435484, 10.57,  0.609,  0.094,  0.349,  0.322,  0.671,  0.0015, 0.0009, 0.0016, 0.0007, 0.0009, 0.0012),
        ('L1',  427.634240591398,   153.00114247311825, 15.67,  1.243,  0.776,  0.73,   0.712,  1.445,  0.0075, 0.0462, 0.0976, 0.011,  0.0254, 0.0318),
        ('L2',  423.04670698924724, 225.64953797043006, 15.86,  1.34,   1.497,  0.754,  0.572,  1.327,  0,  0,  0,  0,  0,  0),
        ('581', 423.68682795698919, 167.34198588709677, 14.56,  0.238,  0.161,  0.118,  0.244,  0.361,  0.0246, 0.028,  0.02,   0.0193, 0.0197, 0.0155),
        ('580', 424.75369623655905, 151.33896169354836, 14.73,  0.367,  0.303,  0.241,  0.305,  0.547,  0.0255, 0.0185, 0.0185, 0.0125, 0.046,  0.0395),
        ('L3',  419.09929435483861, 320.87766717069877, 14.61,  1.936,  1.837,  1.091,  1.047,  2.142,  0.0145, 0.0265, 0.145,  0.009,  0.007,  0.011),
        ('L4',  418.99260752688139, 314.07158098118259, 16.33,  1.344,  1.086,  0.936,  0.785,  1.726,  0.058,  0.0325, 0.343,  0.0205, 0.0368, 0.058),
        ('1002', 415.47194220430072, 321.93813424059124, 14.57,  0.574,  -0.027, 0.354,  0.379,  0.733,  0.0055, 0.0065, 0.011,  0.007,  0.0125, 0.013),
        ('590', 413.55157930107475, 221.0844086021504,  14.64,  1.352,  0.853,  0.753,  0.747,  1.5,    0.011,  0.012,  0.0525, 0.005,  0.0105, 0.0135),
        ('614', 392.10752688171988, 249.10196992607518, 15.67,  1.063,  0.399,  0.834,  0.645,  1.48,   0.0424, 0.0474, 0.0311, 0.0226, 0.0368, 0.058),
        ('618', 388.48017473118233, 238.56184475806447, 12.72,  2.192,  2.144,  1.254,  1.151,  2.407,  0.0051, 0.0075, 0.0307, 0.0035, 0.0032, 0.0045),
        ('624', 380.05191532258016, 254.21653645833334, 13.81,  0.791,  0.394,  0.417,  0.404,  0.822,  0.0141, 0.024,  0.0042, 0.0014, 0.0212, 0.0198),
        ('626', 377.49143145161241, 246.74845850134409, 14.76,  1.406,  1.067,  0.806,  0.816,  1.624,  0.0071, 0.0028, 0.0438, 0.0092, 0.0205, 0.0113),
        ('627', 374.61088709677364, 226.92657930107532, 14.9,   0.689,  0.078,  0.428,  0.387,  0.817,  0.0064, 0.017,  0.0085, 0.0007, 0.0127, 0.0127),
        ('634', 364.47563844085971, 243.96393229166682, 14.61,  0.647,  0.123,  0.382,  0.372,  0.757,  0.0042, 0.005,  0.0127, 0.0113, 0.0177, 0.0064),
        ('642', 351.45984543010701, 235.185206653226,   15.29,  0.571,  0.318,  0.302,  0.393,  0.697,  0.0191, 0.0453, 0.012,  0.0198, 0.0021, 0.0177),
        ('185', 338.23067876344032, 144.41018565188187, 10.54,  0.202,  0.113,  0.109,  0.124,  0.231,  0.0018, 0.0009, 0.0033, 0.001,  0.0013, 0.0018),
        ('646', 338.76411290322534, 239.89302965389791, 15.84,  1.06,   1.426,  0.583,  0.504,  1.09,   0,  0,  0,  0,  0,  0),
        ('193', 332.36290322580601, 145.35783140120975, 10.03,  1.18,   1.152,  0.615,  0.537,  1.153,  0.0015, 0.0008, 0.0023, 0.0011, 0.0008, 0.0015),
        ('653', 329.80241935483826, 286.44155955981176, 9.54,   -0.004, -0.099, 0.009,  0.008,  0.017,  0.0014, 0.0004, 0.0009, 0.0007, 0.0007, 0.0011),
        ('650', 330.97597446236512, 265.87714003696237, 12.27,  0.157,  0.11,   0.08,   0.086,  0.166,  0.002,  0.0014, 0.0041, 0.0016, 0.0022, 0.0027),
        ('652', 328.94892473118233, 229.46865969422043, 14.82,  0.611,  0.126,  0.276,  0.339,  0.618,  0.0113, 0.0297, 0.0177, 0.0453, 0.024,  0.0226),
        ('666', 308.35836693548339, 205.00910408266134, 12.73,  0.164,  -0.004, 0.091,  0.108,  0.2,    0.0034, 0.0028, 0.0042, 0.0042, 0.003,  0.0048),
        ('671', 302.49059139784896, 285.78650243615618, 13.39,  0.968,  0.719,  0.575,  0.494,  1.071,  0.0037, 0.0048, 0.0108, 0.0033, 0.0035, 0.0046),
        ('670', 303.87752016128979, 272.13058845766153, 11.93,  1.356,  1.313,  0.723,  0.653,  1.375,  0.0016, 0.0018, 0.0058, 0.0018, 0.0012, 0.0023),
        ('676', 295.66263440860166, 271.59715431787657, 13.07,  1.146,  0.666,  0.683,  0.673,  1.352,  0.0032, 0.0041, 0.0107, 0.0015, 0.0218, 0.0032),
        ('675', 296.19606854838662, 266.36949974798415, 13.4,   1.909,  1.936,  1.082,  1.002,  2.085,  0.0026, 0.0035, 0.0283, 0.0018, 0.0018, 0.0024),
        ('L5',  287.44774865591347, 265.59441994287658, 17.8,   1.9,    -0.1,   3.1,    2.6,    5.8,    0.1633, 0.3266, 0.4491, 0.1225, 0.0408, 0.1225),
        ('682', 284.24714381720378, 266.76797505040349, 13.75,  0.632,  0.098,  0.366,  0.352,  0.717,  0.0039, 0.0039, 0.0064, 0.0017, 0.0025, 0.0039),
        ('685', 276.88575268817152, 256.7394132224465,  11.95,  0.463,  0.096,  0.29,   0.28,   0.57,   0.003,  0.0021, 0.0028, 0.0024, 0.0021, 0.0034),
        ('688', 273.25840053763386, 206.35495841733899, 12.75,  0.293,  0.245,  0.158,  0.18,   0.337,  0.0033, 0.0024, 0.0081, 0.0037, 0.005,  0.0074),
        ('1082', 272.29821908602099, 352.21132182459706, 15.01,  0.835,  -0.001, 0.485,  0.619,  1.102,  0.0058, 0.0139, 0.0225, 0.0029, 0.0133, 0.0162),
        ('1087', 268.03074596774144, 326.49979628696269, 14.44,  1.595,  1.284,  0.928,  0.882,  1.812,  0.004,  0.0142, 0.0592, 0.0035, 0.0049, 0.0072),
        ('1102', 242.21253360215005, 360.95964171707021, 12.11,  0.314,  0.089,  0.193,  0.195,  0.388,  0.0034, 0.0026, 0.0059, 0.0026, 0.0036, 0.0052),
        ('1112', 214.68733198924684, 335.11315734207017, 13.98,  0.814,  0.286,  0.443,  0.431,  0.874,  0.0067, 0.004,  0.0152, 0.0054, 0.0031, 0.0076),
        ('1119', 207.96606182795654, 349.62256594422075, 11.88,  0.551,  0.069,  0.312,  0.299,  0.611,  0.0023, 0.0038, 0.0042, 0.0019, 0.0042, 0.0045),
        ('1124', 201.99159946236517, 317.69493237567235, 13.71,  0.315,  0.258,  0.173,  0.201,  0.373,  0.0035, 0.0043, 0.008,  0.0029, 0.0051, 0.0057),
        ('1122', 203.48521505376311, 310.10949890793057, 14.09,  0.595,  -0.297, 0.376,  0.442,  0.816,  0.0034, 0.006,  0.0074, 0.0038, 0.0028, 0.0046),
        ('724', 204.12533602150506, 274.18217615927466, 11.12,  1.104,  0.904,  0.575,  0.527,  1.103,  0.0035, 0.0035, 0.0052, 0.0023, 0.0023, 0.0038),
        ('733', 193.7767137096771,  307.5468813004037,  12.24,  1.285,  1.087,  0.698,  0.65,   1.347,  0.0034, 0.0043, 0.006,  0.0029, 0.0022, 0.004)]
    SA98 = getTable(data_SA98)

    # # Check that stars are properly placed over the field
    # import matplotlib.pyplot as plt
    # fig, ax = plt.subplots()
    # ax.imshow(plt.imread("landolt/" + field + ".gif"))
    # max_y = ax.get_ylim()[0]
    # ax.scatter(SA98['x'], max_y - SA98['y'])
    # plt.show()

    all_fields = {'pg1323': pg1323, 'SA98': SA98}

    return all_fields[field]


if __name__ == '__main__':
    """
    Use the commented code to print the (x,y) coordinates of standard stars
    to screen on mouse click.
    """

    field = 'SA98'

    # # Load Landolt standard file. Notice that y axis is inverted.
    # import matplotlib.pyplot as plt
    # fig, ax = plt.subplots()
    # ax.imshow(plt.imread("landolt/" + field + ".gif"))

    # max_y = ax.get_ylim()[0]

    # def onclick(event):
    #     if event.button == 1:
    #         # Write to figure
    #         circ = plt.Circle(
    #             (event.xdata, event.ydata), radius=1, color='g')
    #         ax.add_patch(circ)
    #         ax.figure.canvas.draw()
    #         print(event.xdata, max_y - event.ydata)
    #     else:
    #         pass

    # def zoom_fun(event):
    #     """
    #     https://gist.github.com/tacaswell/3144287
    #     """
    #     base_scale = 2.
    #     # get the current x and y limits
    #     cur_xlim = ax.get_xlim()
    #     cur_ylim = ax.get_ylim()
    #     # set the range
    #     cur_xrange = (cur_xlim[1] - cur_xlim[0])*.5
    #     cur_yrange = (cur_ylim[1] - cur_ylim[0])*.5
    #     xdata = event.xdata # get event x location
    #     ydata = event.ydata # get event y location
    #     if event.button == 'up':
    #         # deal with zoom in
    #         scale_factor = 1/base_scale
    #     elif event.button == 'down':
    #         # deal with zoom out
    #         scale_factor = base_scale
    #     else:
    #         # deal with something that should never happen
    #         scale_factor = 1
    #         print event.button
    #     # set new limits
    #     ax.set_xlim([xdata - cur_xrange*scale_factor,
    #                  xdata + cur_xrange*scale_factor])
    #     ax.set_ylim([ydata - cur_yrange*scale_factor,
    #                  ydata + cur_yrange*scale_factor])
    #     ax.figure.canvas.draw() # force re-draw

    # # attach the call back
    # fig.canvas.mpl_connect('scroll_event', zoom_fun)

    # fig.canvas.mpl_connect('button_press_event', onclick)
    # plt.show()

    main(field)
